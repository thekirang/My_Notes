Docker Image:

A Docker image is a lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, 
runtime, libraries, environment variables, and configuration files.

Docker Container:

A Docker container is a running instance of a Docker image.

Incorporating all the commands step-by-step as per the provided history, here is a comprehensive guide to using Docker:

### Step 1: Install Docker

1. **Update your package index**:
   
   yum update -y
   

2. **Install Docker**:
   
   yum install docker
   

3. **Start the Docker service**:
   
   systemctl start docker
   

4. **Check the status of the Docker service**:
   
   systemctl status docker
   

5. **Verify the Docker installation**:
   
   docker -v
   

### Step 2: Basic Docker Commands

1. **Pull the "hello-world" image**:
   
   docker pull hello-world
   

2. **List Docker images**:
   
   docker images
   

3. **Run a container using the "hello-world" image**:
   
   docker run hello-world
   

4. **List running containers**:
   
   docker ps
   

5. **List all containers (including stopped)**:
   
   docker ps -a
   

6. **Remove the "hello-world" image**:
   
   docker rmi -f hello-world
   

### Step 3: Running and Managing Containers

1. **Run a container with interactive terminal**:
   
   docker run -it ubuntu:18.04 
   
   
   exit container without stopping OR KEEP IT RUNNING IN BACKGROUND  use, CTRL + PQ
   

2. **Stop a running container**:
   
   docker stop <container_id>
   

3. **Start a stopped container**:
   
   docker start <container_id>
   

4. **Attach to a running container**: TO GO INTO BACKGROUND RUNNING CONTAINER
   
   docker attach <container_id>
   

5. **Kill a running container**:
   
   docker kill <container_id>
   

6. **Remove a container**:
   
   docker rm <container_id>
   

### Step 4: Inspecting and Monitoring Containers

1. **Inspect a container**:
   
   docker inspect <container_id>
   

2. **Check container stats**:
   
   docker stats <container_id>
   

3. **Get logs from a container**:
   
   docker logs -f <container_id>
   

### Step 5: Using Docker Volumes

1. **List Docker volumes**:
   
   docker volume ls
   

2. **Create a Docker volume**:
   
   docker volume create volume-1
   

3. **Inspect a Docker volume**:
   
   docker volume inspect volume-1
   

4. **Run a container with a volume**:
   
   docker run --name ubuntu-1 -itdv volume-1:/data ubuntu:18.04
   

5. **Remove a Docker volume**:
   
   docker volume rm volume-1
   

6. **Prune unused Docker volumes**:
   
   docker volume prune
   

### Step 6: Bind Mounts

1. **Run a container with a bind mount**:
   
   docker run --name ubuntu-2 -itdv /mnt:/data ubuntu:18.04
   

### Step 7: Dockerfile and Building Images

1. **Create a Dockerfile**:
   dockerfile
   FROM ubuntu:18.04
   RUN apt-get update -y
   

2. **Build a Docker image from the Dockerfile**:
   
   docker build -t ubuntu-1:1.0 .
   

3. **Build a Docker image with a custom name**:
   
   docker build -t newimagename .
   

### Step 8: Advanced Container Management

1. **Rename a container**:
   
   docker rename <old_name> <new_name>
   

2. **Commit changes to a new image**:
   
   docker commit <container_id> newimagename:tagname
   

3. **Push an image to Docker Hub**:
   
   docker login
   docker push username/imagename:tagname
   

4. **Pull an image from Docker Hub**:
   
   docker pull username/imagename:tagname
   

### Step 9: Docker System Management

1. **Prune unused Docker objects**: means delete all unused images and container
   
   docker system prune -a -f
   

2. **List Docker images**:
   
   docker images
   

3. **Remove a Docker image**:
   
   docker rmi -f <image_id>
   

### Step 10: Networking and HTTPD Example

1. **Run an HTTPD container with port mapping**:
   
   docker run -itdp 80:80 httpd
   

2. **Check container logs**:
   
   docker logs -f <container_id>
   

3. **Execute a command inside a running container**:
   
   docker exec -it <container_id> 
   

### Additional Tips

- **Detach from a container and keep it running**: `Ctrl + P + Q`
- **Log out of a container and stop it**: `Ctrl + D`

- **Ping localhost inside a container**:
   
   docker run -it centos:8 ping localhost -c 50
   
   Ctrl + P, Ctrl + Q
is used to detach from a running container. This will leave the container running in the background, 
but you will no longer be able to interact with it.


Ctrl + D
is used to exit a running container. This will stop the container and all of the processes running inside of it.

Ctrl + C
is used to send a SIGINT signal to a running container. This will typically cause the container to stop, 
but it may also cause the container to restart depending on how it is configured.
   

This comprehensive guide covers all the commands from your session history, providing a detailed introduction to using Docker effectively. 
Experiment with these commands to get comfortable with Docker's functionality and capabilities.