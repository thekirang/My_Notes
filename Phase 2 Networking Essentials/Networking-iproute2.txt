Linux networking notes and cheatsheet

DNS resolution and hostname configuration:

/etc/hosts
/etc/resolv.conf
/etc/nsswitch.conf

iproute2 suite (the modern replacement for legacy networking tools):

yum install iproute2

-------------------------------------------------------

when we ping google.com then 

#########################
# 📁 /etc/nsswitch.conf - Name Service Switch
#########################

/etc/nsswitch.conf:
- Controls the order of name resolution services.

Example line:
hosts: files dns myhostname

Explanation:
1. files → Checks /etc/hosts
   - If found → Uses IP → Done.

2. dns → Uses DNS servers listed in /etc/resolv.conf
   - Sends DNS request to servers like 8.8.8.8.

3. myhostname → Checks if the domain matches the local hostname.
   - Rarely used in regular domain lookups.

If all steps fail → Error: "Name or service not known".

#########################
# 📁 /etc/hosts - Local Hostname Resolution
#########################

/etc/hosts:
- Simple text file that maps hostnames to IP addresses.
- Acts as a mini DNS resolver.
- Used before querying external DNS servers (depends on /etc/nsswitch.conf).
- Useful for local name resolution (e.g. servers in a LAN without DNS).

if not found here then go to /etc/resolv.conf

---

#########################
# 📁 /etc/resolv.conf - DNS Resolver Configuration
#########################

/etc/resolv.conf:
- Contains the IP addresses of DNS servers.
- Linux uses these DNS servers to resolve domain names when not found in /etc/hosts

When the IP and hostname mapping is not found in /etc/hosts, Linux queries the DNS server(s) listed in /etc/resolv.conf to resolve the hostname.

DNS servers are only used when the hostname cannot be resolved locally via /etc/hosts.

Example Flow: ping cdfd.com

1. Linux first checks: /etc/hosts
   → "Is cdfd.com listed here with an IP?"
   - YES: Uses that IP immediately (bypasses DNS).
   - NO: Moves to next step.

2. Linux reads: /etc/resolv.conf
   → "Which DNS server should I ask?"
   - Finds nameserver entries (e.g., 8.8.8.8).

3. Contacts DNS server → Fetches IP for cdfd.com → ping works.

If DNS fails → Error: "Name or service not known".

---

#########################
# Key Points Summary
#########################

- /etc/hosts bypasses DNS entirely if domain is listed.
- /etc/resolv.conf only lists DNS servers—it doesn’t store mappings.
- /etc/nsswitch.conf defines the lookup order (via "hosts:" line).

Final Flow: ping cdfd.com

1. Check /etc/hosts → Found? Use it.
2. Else, check /etc/resolv.conf → Ask DNS server (e.g., 8.8.8.8).
3. If all fail → Name resolution error.

------------------------

##########################################
# 🧠 Mastering iproute2 in Linux  (https://www.youtube.com/watch?v=0mOLLmAbhBA)
##########################################

iproute2 is the modern suite replacing legacy tools like ifconfig, netstat, route, arp, and brctl.

Why iproute2 is Better:

Unified & Easy to Learn: All commands follow a consistent syntax.

More Powerful: Supports advanced features like multiple routes and namespaces.

Actively Maintained: Regular updates, unlike outdated net-tools.

==========================================
🔰 Step 1: Understand iproute2 Basics
==========================================
Learn the core subcommands:
- ip addr        → IP addresses
- ip link        → Network interfaces
- ip route       → Routing table
- ip neigh       → ARP table (neighbor cache)
- ss             → Socket stats (replaces netstat)
- bridge         → Bridge configuration
- tc             → Traffic control

==========================================
⚙️ Step 2: Day-to-Day Use Commands
==========================================

========================
🔹 Interface Management
========================

The ip command follows a specific syntax format:

ip [OPTIONS] OBJECT {COMMAND | help}

# Show IP addresses of all interfaces.
ip addr show  

# Assign IP 192.168.1.100/24 to eth0.
ip addr add 192.168.1.100/24 dev eth0            

# Remove the IP from eth0.
ip addr del 192.168.1.100/24 dev eth0

# Show all network interfaces and their status.
ip link show

# Bring up (enable) the interface eth0.
ip link set dev eth0 up

# Bring down (disable) the interface eth0.
ip link set dev eth0 down

========================
🔹 Routing Table
========================
Answers: "Which path should this packet take to reach its destination?"
> A routing table in Linux is a set of rules stored in the kernel that determines how network packets are forwarded from one host to another. It contains information about destination networks, gateways (next-hop routers), interfaces, and metrics to decide the best path for data packets. it works on layer 3

# Show the routing table.
ip route show

# Add static route to 192.168.2.0/24 via 192.168.1.1.
ip route add 192.168.2.0/24 via 192.168.1.1 dev eth0

# Remove the route to 192.168.2.0/24.
ip route del 192.168.2.0/24 dev eth0

========================
🔹 ARP Table
========================
Answers: "What’s the MAC address of this IP on my local network?"
> The ARP (Address Resolution Protocol) Table (also called the Neighbor Table in IPv6) is a critical component in Linux networking that maps IP addresses to MAC addresses on a local network. It ensures that devices can communicate at the data link layer (Layer 2) by resolving IPs to physical hardware addresses
The table is stored in the Linux kernel and can be viewed/modified using tools like ip neigh or arp.

# Show the ARP table (neighbor cache).
ip neigh show

# Add static ARP entry.
ip neigh add 192.168.1.10 lladdr aa:bb:cc:dd:ee:ff dev eth0

# Delete ARP entry for 192.168.1.10.
ip neigh del 192.168.1.10 dev eth0

========================
🔹 Socket Statistics
========================

# Show all listening TCP/UDP ports with PID.
ss -tulpn | grep "80"

# Show socket summary (TCP/UDP states).
ss -s

# Show Active TCP connections with PID.
ss -tp

========================
🌉 Bridge Control -
========================
What is a Bridge (Virtual Switch) in Linux?
- software defined switch in linux
- works at layer 2 i.e. ethernet level, limited to MAC addresses
- works in same network or subnet
- Merges multiple interfaces (physical/virtual) into a single like eth0 + eth1 into one logical network ex. br0
- Learns and forwards traffic based on MAC addresses

How It Works
1. Learns MAC-to-port mappings (bridge fdb show).
2. Forwards frames to the correct port (or floods if unknown).

# List all bridge ports
bridge link show

# Show VLANs on bridge.
bridge vlan show

# Show bridge MAC address table.  
bridge fdb show             >> Forwarding Database (FDB)

========================
🚦 Traffic Control (tc)
========================
What Can It Do?
- Limit Bandwidth (Speed Control)
- Prioritize Traffic (QoS - Quality of Service)
- Delay or Drop Packets (For Testing)

tc = Linux’s built-in tool for controlling network traffic.

qdisc = How packets are managed (queued/dropped).
class = Different priority lanes (if you set them up).

Used for QoS, bandwidth limiting, and network testing.

# Show traffic control (queuing disciplines).
tc qdisc show dev eth0

# Show traffic classes (used in shaping/QoS).
tc class show dev eth0

========================
✅ Summary
========================

- Use `ip` for IP, interface, route, and ARP management.
- Use `ss` instead of netstat for socket/port info.
- Use `bridge` for managing Linux software bridges.
- Use `tc` for advanced traffic shaping and bandwidth control.





