kdump Setup and Overview Notes
======================================

1. Quick Setup Steps
--------------------

1. Install kexec tools  
   $ yum install -y kexec-tools

2. Reserve memory for the capture kernel  
   $ sudo grubby --update-kernel=ALL --args="crashkernel=auto"

3. Reboot to apply memory reservation  
   $ reboot

4. Configure /etc/kdump.conf  
   path /var/crash  
   default reboot  
   core_collector makedumpfile -l --message-level 1 -d 31

5. Enable and start the kdump service  
   $ sudo systemctl enable --now kdump.service

6. Verify service status  
   $ systemctl status kdump.service


2. What Is kdump?
-----------------

- kdump is the RHEL kernel crash–dump mechanism.
- On a kernel panic, it uses kexec to boot a secondary “capture” kernel.
- That kernel writes out the crashed kernel’s memory image (vmcore) for root-cause analysis.


3. How kdump Works
------------------

1. Boot: Main kernel reserves memory and loads capture kernel.
2. Crash: Kernel panics (bug or manual trigger).
3. Soft Reboot: kexec jumps to capture kernel.
4. Dump: Capture kernel writes the crashed kernel’s memory to /var/crash/vmcore.
5. Reboot: System restarts after dump is saved.


4. Detailed Setup
-----------------

4.1 Prerequisites  
- Root privileges.  
- RHEL 8+.

4.2 Memory Reservation  
- Automatic:  
  $ sudo grubby --update-kernel=ALL --args="crashkernel=auto"
- Manual:  
  $ sudo grubby --update-kernel=ALL --args="crashkernel=256M"
- Estimate memory:  
  $ kdumpctl estimate  
  $ makedumpfile --mem-usage /proc/kcore

4.3 Reboot  
$ reboot

4.4 Configure /etc/kdump.conf  
- Dump location (path): /var/crash, block device, NFS, or SSH  
- Failure action: reboot, halt, poweroff  
- Core collector:  
  core_collector makedumpfile -l --message-level 1 -d 31

4.5 Enable & Start Service  
$ sudo systemctl enable --now kdump.service

4.6 Verify  
$ systemctl status kdump.service


5. Advanced Configuration
-------------------------

- Blacklist modules in the capture kernel:  
  In /etc/sysconfig/kdump:  
  KDUMP_COMMANDLINE_APPEND="rd.driver.blacklist=module1,module2"

- Custom dump target:  
  path /mnt/backup-crash  
  nfs :server:/export/cores  
  ssh user@backup-server  
  sshkey /root/.ssh/kdump_id_rsa

- Failure action:  
  failure_action shell


6. Testing kdump
----------------

WARNING: Testing causes a real crash. Avoid on production.

$ echo c > /proc/sysrq-trigger

After reboot, check /var/crash for:
- vmcore
- vmcore-dmesg.txt
- kexec-dmesg.log


7. Enabling/Disabling
---------------------

Enable:  
$ sudo systemctl enable --now kdump.service

Disable:  
$ sudo systemctl disable --now kdump.service


8. Best Practices
-----------------

- Always reserve memory and verify with kdumpctl estimate.
- Use UUID or LABEL for reliability.
- Ensure /var/crash exists and has enough space.
- Retest after kernel updates.
- Secure remote targets with SSH keys and optional encryption.


9. Summary of Key Commands
--------------------------

| Task                 | Command                                             |
|----------------------|-----------------------------------------------------|
| Install tools        | yum install -y kexec-tools                          |
| Reserve memory       | grubby --update-kernel=ALL --args="crashkernel=auto" |
| Estimate memory      | kdumpctl estimate                                   |
| Configure dump path  | path /var/crash in /etc/kdump.conf                 |
| Enable kdump         | systemctl enable --now kdump.service               |
| Check status         | systemctl status kdump.service                     |
| Trigger test crash   | echo c > /proc/sysrq-trigger                       |
------------------------------------------------------------------------------
