========================================
Ansible Complete Notes (Beginner to Pro)
========================================

## ðŸ”¹ 1. WHAT IS ANSIBLE?

* Agentless automation tool for configuration management, app deployment, orchestration
* Uses SSH for communication
* Playbooks written in YAML

## ðŸ”¹ 2. CORE COMPONENTS

1. INVENTORY:

   * Location: /etc/ansible/hosts (INI or YAML format)
   * Defines managed nodes and groups

2. PLAYBOOK:

   * YAML file defining set of tasks to run on remote nodes
   * Organized into plays, each with tasks

3. TASK:

   * Smallest unit of action (e.g., install a package)

4. MODULE:

   * Actual logic to perform tasks (e.g., yum, apt, copy, file)

5. VARIABLES:

   * Store dynamic values (defined in playbook, host\_vars, group\_vars, CLI, etc.)
   * Precedence: CLI > Playbook > host\_vars/group\_vars > Inventory > role defaults

6. HANDLERS:

   * Triggered only when notified (e.g., restart service after config change)

7. TEMPLATES:

   * Jinja2-based, used for dynamic file generation

8. FACTS:

   * System information collected from managed nodes

9. TAGS:

   * Allow specific task execution: `ansible-playbook play.yml --tags "install"`

10. CONFIGURATION FILE:

    * Default: /etc/ansible/ansible.cfg
    * Priority: ANSIBLE\_CONFIG > ./ansible.cfg > \~/.ansible.cfg > /etc/ansible/ansible.cfg

11. AD-HOC COMMANDS:

    * Quick one-liners
    * Example: `ansible all -m ping`

12. VAULT:

    * Encrypts sensitive files
    * Commands: create, encrypt, decrypt, rekey, edit

13. COLLECTIONS:

    * Bundles of roles, modules, plugins
    * Location: \~/.ansible/collections or /usr/share/ansible/collections

## ðŸ”¹ 3. INSTALLATION AND SETUP


âœ… VERIFY SETUP:

* `ansible all -m ping`

## ðŸ”¹ 4. AD-HOC COMMANDS

* `ansible all -m ping`
* `ansible devlinux -a "uptime"`
* `ansible devlinux -b -m yum -a "name=httpd state=present"`

## ðŸ”¹ 5. BASIC PLAYBOOK EXAMPLE

---

* name: Install Apache
  hosts: all
  become: yes
  tasks:

  * name: Install httpd
    yum:
    name: httpd
    state: present

  * name: Start httpd
    service:
    name: httpd
    state: started
    enabled: yes

## ðŸ”¹ 6. ROLES DIRECTORY STRUCTURE

project/
â”œâ”€â”€ inventory
â”œâ”€â”€ playbook.yml
â””â”€â”€ roles/
â””â”€â”€ webserver/
â”œâ”€â”€ tasks/
â”‚   â””â”€â”€ main.yml
â”œâ”€â”€ handlers/
â”‚   â””â”€â”€ main.yml
â””â”€â”€ templates/
â””â”€â”€ index.html.j2

## ðŸ”¹ 7. COMMON MODULES

* command, shell, yum, apt, copy, file, template, service, user, cron

## ðŸ”¹ 8. VARIABLES EXAMPLE

---

* hosts: all
  become: yes
  vars:
  pkg: httpd
  path: /var/www/html/
  tasks:

  * name: install apache
    yum:
    name: "{{ pkg }}"
    state: present

  * name: deploy file
    copy:
    src: index.html
    dest: "{{ path }}"

## ðŸ”¹ 9. HANDLERS EXAMPLE

---

* hosts: all
  become: yes
  tasks:

  * name: update config
    template:
    src: app.conf.j2
    dest: /etc/app.conf
    notify: restart app

  handlers:

  * name: restart app
    service:
    name: app
    state: restarted

## ðŸ”¹ 10. LOOPING EXAMPLE

---

* hosts: all
  become: yes
  tasks:

  * name: Create users
    user:
    name: "{{ item }}"
    state: present
    loop:

    * user1
    * user2
    * user3

## ðŸ”¹ 11. VAULT COMMANDS

* Create encrypted file: `ansible-vault create secrets.yml`
* Encrypt existing file: `ansible-vault encrypt vars.yml`
* Decrypt file: `ansible-vault decrypt vars.yml`
* Edit encrypted file: `ansible-vault edit secrets.yml`
* Rekey: `ansible-vault rekey secrets.yml`

## ðŸ”¹ 12. FILE LOCATIONS (RHEL)

| Component    | Location                                      |
| ------------ | --------------------------------------------- |
| Executables  | /usr/bin/ansible, /usr/bin/ansible-playbook   |
| Config File  | /etc/ansible/ansible.cfg                      |
| Inventory    | /etc/ansible/hosts                            |
| Modules      | /usr/share/ansible/plugins/modules/           |
| Roles        | /usr/share/ansible/roles/, \~/.ansible/roles/ |
| Collections  | \~/.ansible/collections/                      |
| Logs         | /var/log/ansible.log                          |
| Custom Facts | /etc/ansible/facts.d/                         |

## ðŸ”¹ 13. INTERVIEW CHECKLIST

âœ… Understand inventory and playbook structure
âœ… Explain variable precedence
âœ… Know Ansible Vault usage
âœ… Write YAML playbooks with loops, handlers, tasks
âœ… Manage 100+ nodes (grouping, scaling, roles)
âœ… Practice common modules: yum, copy, template, service
âœ… Know ad-hoc command usage
âœ… Use of tags, dry-run (`--check`), step debug (`--step`)

## ðŸ”¹ 14. BEST PRACTICES

* Avoid using root directly; use become
* Use roles for modularity
* Store secrets in vault-encrypted files
* Keep playbooks simple and reusable
* Maintain separate inventory for dev/stage/prod
* Use `ansible-lint` for validating playbooks

---

## End of Ansible Unified Notes
